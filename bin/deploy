#!/usr/bin/env bash
set -ex

export SOLC_FLAGS=${SOLC_FLAGS:-"--optimize"}
export ETH_GAS=${ETH_GAS:-"3900000"}

dapp build

export SETH_ASYNC=yes

SAItx=$(dapp create DSToken $(seth --to-bytes32 $(seth --from-ascii 'SAI')))
SINtx=$(dapp create DSToken $(seth --to-bytes32 $(seth --from-ascii 'SIN')))
test -z $SAI_GEM && GEMtx=$(dapp create DSToken $(seth --to-bytes32 $(seth --from-ascii 'ETH')))
test -z $SAI_PIP && PIPtx=$(dapp create DSValue)
SKRtx=$(dapp create DSToken $(seth --to-bytes32 $(seth --from-ascii 'SKR')))
POTtx=$(dapp create DSVault)
PITtx=$(dapp create DSVault)
TIPtx=$(dapp create SaiTip)

DADtx=$(dapp create DSGuard)
test -z $SAI_MOM && MOMtx=$(dapp create DSRoles)


export SETH_ASYNC=no

SAI_SAI=$(seth receipt $SAItx contractAddress)
SAI_SIN=$(seth receipt $SINtx contractAddress)
SAI_JUG=$(dapp create SaiJug $SAI_SAI $SAI_SIN)
SAI_SKR=$(seth receipt $SKRtx contractAddress)
test -z $SAI_GEM && SAI_GEM=$(seth receipt $GEMtx contractAddress)
test -z $SAI_PIP && SAI_PIP=$(seth receipt $PIPtx contractAddress)
SAI_JAR=$(dapp create SaiJar $SAI_SKR $SAI_GEM $SAI_PIP)
SAI_POT=$(seth receipt $POTtx contractAddress)
SAI_PIT=$(seth receipt $PITtx contractAddress)
SAI_TIP=$(seth receipt $TIPtx contractAddress)

SAI_TUB=$(dapp create SaiTub $SAI_JAR $SAI_JUG $SAI_POT $SAI_PIT $SAI_TIP)
SAI_TAP=$(dapp create SaiTap $SAI_TUB $SAI_PIT)
SAI_TOP=$(dapp create SaiTop $SAI_TUB $SAI_TAP)

SAI_DAD=$(seth receipt $DADtx contractAddress)
test -z $SAI_MOM && SAI_MOM=$(seth receipt $MOMtx contractAddress) && seth send $SAI_MOM "setRootUser(address,bool)" $ETH_FROM true && seth send $SAI_MOM "setAuthority(address)" $SAI_MOM

export SETH_ASYNC=yes

seth send $SAI_TIP "warp(uint64)" 0

seth send $SAI_TIP "setAuthority(address)" $SAI_MOM
seth send $SAI_TUB "setAuthority(address)" $SAI_MOM
seth send $SAI_TAP "setAuthority(address)" $SAI_MOM
seth send $SAI_TOP "setAuthority(address)" $SAI_MOM
seth send $SAI_JAR "setAuthority(address)" $SAI_MOM

seth send $SAI_POT "setAuthority(address)" $SAI_DAD
seth send $SAI_PIT "setAuthority(address)" $SAI_DAD
seth send $SAI_JUG "setAuthority(address)" $SAI_DAD

seth send $SAI_SAI "setAuthority(address)" $SAI_DAD
seth send $SAI_SIN "setAuthority(address)" $SAI_DAD
seth send $SAI_SKR "setAuthority(address)" $SAI_DAD

seth send $SAI_MOM "setUserRole(address,uint8,bool)" $SAI_TUB 255 true
seth send $SAI_MOM "setRoleCapability(uint8,address,bytes4,bool)" 255 $SAI_JAR $(seth calldata 'join(address,uint128)') true
seth send $SAI_MOM "setRoleCapability(uint8,address,bytes4,bool)" 255 $SAI_JAR $(seth calldata 'exit(address,uint128)') true
seth send $SAI_MOM "setRoleCapability(uint8,address,bytes4,bool)" 255 $SAI_JAR $(seth calldata 'push(address,address,uint128)') true
seth send $SAI_MOM "setRoleCapability(uint8,address,bytes4,bool)" 255 $SAI_JAR $(seth calldata 'pull(address,address,uint128)') true

seth send $SAI_MOM "setUserRole(address,uint8,bool)" $SAI_TOP 254 true
seth send $SAI_MOM "setRoleCapability(uint8,address,bytes4,bool)" 254 $SAI_JAR $(seth calldata 'push(address,address,uint128)') true
seth send $SAI_MOM "setRoleCapability(uint8,address,bytes4,bool)" 254 $SAI_TUB $(seth calldata 'cage(uint128)') true

seth send $SAI_DAD "permit(address,address,bytes32)" $SAI_TUB $SAI_JUG $(seth --to-bytes32 $(seth calldata 'lend(address,uint128)'))
seth send $SAI_DAD "permit(address,address,bytes32)" $SAI_TUB $SAI_JUG $(seth --to-bytes32 $(seth calldata 'mend(address,uint128)'))
seth send $SAI_DAD "permit(address,address,bytes32)" $SAI_TUB $SAI_POT $(seth --to-bytes32 $(seth calldata 'push(address,address,uint128)'))
seth send $SAI_DAD "permit(address,address,bytes32)" $SAI_TUB $SAI_POT $(seth --to-bytes32 $(seth calldata 'pull(address,address,uint128)'))

seth send $SAI_DAD "permit(address,address,bytes32)" $SAI_TAP $SAI_JUG $(seth --to-bytes32 $(seth calldata 'heal(address)'))
seth send $SAI_DAD "permit(address,address,bytes32)" $SAI_TAP $SAI_PIT $(seth --to-bytes32 $(seth calldata 'mint(address,uint128)'))
seth send $SAI_DAD "permit(address,address,bytes32)" $SAI_TAP $SAI_PIT $(seth --to-bytes32 $(seth calldata 'burn(address,uint128)'))
seth send $SAI_DAD "permit(address,address,bytes32)" $SAI_TAP $SAI_PIT $(seth --to-bytes32 $(seth calldata 'push(address,address,uint128)'))
seth send $SAI_DAD "permit(address,address,bytes32)" $SAI_TAP $SAI_PIT $(seth --to-bytes32 $(seth calldata 'pull(address,address,uint128)'))

seth send $SAI_DAD "permit(address,address,bytes32)" $SAI_TOP $SAI_JUG $(seth --to-bytes32 $(seth calldata 'heal(address)'))
seth send $SAI_DAD "permit(address,address,bytes32)" $SAI_TOP $SAI_PIT $(seth --to-bytes32 $(seth calldata 'burn(address)'))
seth send $SAI_DAD "permit(address,address,bytes32)" $SAI_TOP $SAI_PIT $(seth --to-bytes32 $(seth calldata 'push(address,address,uint128)'))
seth send $SAI_DAD "permit(address,address,bytes32)" $SAI_TOP $SAI_PIT $(seth --to-bytes32 $(seth calldata 'pull(address,address,uint128)'))

seth send $SAI_DAD "permit(address,address,bytes32)" $SAI_JAR $SAI_SKR $(seth --to-bytes32 $(seth calldata 'mint(uint128)'))
seth send $SAI_DAD "permit(address,address,bytes32)" $SAI_JAR $SAI_SKR $(seth --to-bytes32 $(seth calldata 'burn(uint128)'))

seth send $SAI_DAD "permit(address,address,bytes32)" $SAI_JUG $SAI_POT $(seth --to-bytes32 $(seth calldata 'mint(address,uint128)'))
seth send $SAI_DAD "permit(address,address,bytes32)" $SAI_JUG $SAI_POT $(seth --to-bytes32 $(seth calldata 'burn(address,uint128)'))
seth send $SAI_DAD "permit(address,address,bytes32)" $SAI_JUG $SAI_PIT $(seth --to-bytes32 $(seth calldata 'burn(address,uint128)'))

seth send $SAI_DAD "permit(address,address,bytes32)" $SAI_POT $SAI_SAI $(seth --to-bytes32 $(seth calldata 'mint(uint128)'))
seth send $SAI_DAD "permit(address,address,bytes32)" $SAI_POT $SAI_SAI $(seth --to-bytes32 $(seth calldata 'burn(uint128)'))
seth send $SAI_DAD "permit(address,address,bytes32)" $SAI_POT $SAI_SIN $(seth --to-bytes32 $(seth calldata 'mint(uint128)'))
seth send $SAI_DAD "permit(address,address,bytes32)" $SAI_POT $SAI_SIN $(seth --to-bytes32 $(seth calldata 'burn(uint128)'))

seth send $SAI_DAD "permit(address,address,bytes32)" $SAI_PIT $SAI_SAI $(seth --to-bytes32 $(seth calldata 'burn(uint128)'))
seth send $SAI_DAD "permit(address,address,bytes32)" $SAI_PIT $SAI_SIN $(seth --to-bytes32 $(seth calldata 'burn(uint128)'))
seth send $SAI_DAD "permit(address,address,bytes32)" $SAI_PIT $SAI_SKR $(seth --to-bytes32 $(seth calldata 'mint(uint128)'))
seth send $SAI_DAD "permit(address,address,bytes32)" $SAI_PIT $SAI_SKR $(seth --to-bytes32 $(seth calldata 'burn(uint128)'))


cat > load-env-$(seth chain) << EOF
#!/bin/bash

# sai deployment on $(seth chain) from $(git rev-parse HEAD)
# $(date)

export SAI_GEM=$SAI_GEM
export SAI_SAI=$SAI_SAI
export SAI_SIN=$SAI_SIN
export SAI_SKR=$SAI_SKR
export SAI_JUG=$SAI_JUG
export SAI_POT=$SAI_POT
export SAI_PIT=$SAI_PIT
export SAI_TIP=$SAI_TIP
export SAI_PIP=$SAI_PIP
export SAI_DAD=$SAI_DAD
export SAI_MOM=$SAI_MOM
export SAI_JAR=$SAI_JAR
export SAI_TUB=$SAI_TUB
export SAI_TAP=$SAI_TAP
export SAI_TOP=$SAI_TOP
EOF

echo SAI TUB DEPLOYED AT: $SAI_TUB
