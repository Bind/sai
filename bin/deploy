#!/usr/bin/env bash
set -ex

export SOLC_FLAGS=${SOLC_FLAGS:-"--optimize"}
export ETH_GAS=${ETH_GAS:-"3500000"}
export ETH_FROM=${ETH_FROM:-$(seth rpc eth_coinbase)}

dapp build

(test -z $TOK_FAB || test -z $VOX_FAB || test -z $TAP_FAB || test -z $TUB_FAB  || test -z $TOP_FAB || test -z $MOM_FAB || test -z $DAD_FAB) && exit 1

export SETH_ASYNC=yes
DADtx=$(seth send $DAD_FAB 'newDad(address,address,address,address)' $TAP_FAB $TUB_FAB $TOP_FAB $MOM_FAB)
export SETH_ASYNC=no
SAI_DAD=$(jshon <<<"$(seth receipt $DADtx logs)" -e 0 -e address -u)

export SETH_ASYNC=yes
test -z $SAI_GEM && GEMtx=$(dapp create DSToken $(seth --to-bytes32 $(seth --from-ascii 'ETH')))
test -z $SAI_GOV && GOVtx=$(dapp create DSToken $(seth --to-bytes32 $(seth --from-ascii 'GOV')))
test -z $SAI_PIP && PIPtx=$(dapp create DSValue)
test -z $SAI_PEP && PEPtx=$(dapp create DSValue)
SAItx=$(seth send $TOK_FAB 'newTok(address,bytes32)' $SAI_DAD $(seth --to-bytes32 $(seth --from-ascii 'DAI')))
SINtx=$(seth send $TOK_FAB 'newTok(address,bytes32)' $SAI_DAD $(seth --to-bytes32 $(seth --from-ascii 'SIN')))
SKRtx=$(seth send $TOK_FAB 'newTok(address,bytes32)' $SAI_DAD $(seth --to-bytes32 $(seth --from-ascii 'SKR')))
VOXtx=$(seth send $VOX_FAB 'newVox(address)' $SAI_DAD)
export SETH_ASYNC=no
test -z $SAI_GEM && SAI_GEM=$(seth receipt $GEMtx contractAddress)
test -z $SAI_GOV && SAI_GOV=$(seth receipt $GOVtx contractAddress)
test -z $SAI_PIP && SAI_PIP=$(seth receipt $PIPtx contractAddress)
test -z $SAI_PEP && SAI_PEP=$(seth receipt $PEPtx contractAddress)
SAI_SAI=$(jshon <<<"$(seth receipt $SAItx logs)" -e 0 -e address -u)
SAI_SIN=$(jshon <<<"$(seth receipt $SINtx logs)" -e 0 -e address -u)
SAI_SKR=$(jshon <<<"$(seth receipt $SKRtx logs)" -e 0 -e address -u)
SAI_VOX=$(jshon <<<"$(seth receipt $VOXtx logs)" -e 0 -e address -u)

export SETH_ASYNC=yes
TAPtx=$(seth send $TAP_FAB 'newTap(address,address,address,address)' $SAI_DAD $SAI_SAI $SAI_SIN $SAI_SKR)
export SETH_ASYNC=no
SAI_TAP=$(jshon <<<"$(seth receipt $TAPtx logs)" -e 0 -e address -u)

export SETH_ASYNC=yes
test -z $SAI_PIT && SAI_PIT="0x0000000000000000000000000000000000000123"
TUBtx=$(seth send $TUB_FAB 'newTub(address,address,address,address,address,address,address,address,address,address,address)' $SAI_DAD $SAI_SAI $SAI_SIN $SAI_SKR $SAI_GEM $SAI_GOV $SAI_PIP $SAI_PEP $SAI_VOX $SAI_TAP $SAI_PIT)
export SETH_ASYNC=no
SAI_TUB=$(jshon <<<"$(seth receipt $TUBtx logs)" -e 0 -e address -u)

seth send $TAP_FAB 'turn(address,address)' $SAI_TAP $SAI_TUB

export SETH_ASYNC=yes
TOPtx=$(seth send $TOP_FAB 'newTop(address,address,address)' $SAI_DAD $SAI_TUB $SAI_TAP)
MOMtx=$(seth send $MOM_FAB 'newMom(address,address,address,address)' $SAI_DAD $SAI_TUB $SAI_TAP $SAI_VOX)
export SETH_ASYNC=no
SAI_TOP=$(jshon <<<"$(seth receipt $TOPtx logs)" -e 0 -e address -u)
SAI_MOM=$(jshon <<<"$(seth receipt $MOMtx logs)" -e 0 -e address -u)

cat > load-env-$(seth chain) << EOF
#!/bin/bash

# sai deployment on $(seth chain) from $(git rev-parse HEAD)
# $(date)

export SAI_GEM=$SAI_GEM
export SAI_GOV=$SAI_GOV
export SAI_SAI=$SAI_SAI
export SAI_SIN=$SAI_SIN
export SAI_SKR=$SAI_SKR
export SAI_PIP=$SAI_PIP
export SAI_PEP=$SAI_PEP
export SAI_DAD=$SAI_DAD
export SAI_MOM=$SAI_MOM
export SAI_VOX=$SAI_VOX
export SAI_PIT=$SAI_PIT
# export SAI_CAGE_AUTH=$SAI_CAGE_AUTH
export SAI_TUB=$SAI_TUB
export SAI_TAP=$SAI_TAP
export SAI_TOP=$SAI_TOP
EOF
